{"version":3,"sources":["config.js","controller/datapicker.controller.js","controller/prompt.controller.js","controller/scanner.controller.js","directive/dynamicbar.directive.js","directive/hourago.directive.js","directive/modalbtn.directive.js","directive/ngadmin.directive.js","directive/ngenter.directive.js","directive/ngshortcut.directive.js","factory/iacore.factory.js","factory/modal.factory.js","filter/porcentaje.filter.js","filter/range.filter.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChzfile":"iaserver.js","sourcesContent":["var app = angular.module(\"app\", ['ngRoute','chieffancypants.loadingBar','ngAnimate','ui.bootstrap','angular-toasty','cfp.loadingBar']);\r\n\r\napp.config(['cfpLoadingBarProvider',function(cfpLoadingBarProvider) {\r\n    cfpLoadingBarProvider.includeSpinner = false;\r\n}]);\r\n\r\napp.config(['toastyConfigProvider', function(toastyConfigProvider) {\r\n    toastyConfigProvider.setConfig({\r\n        sound: true,\r\n        shake: false,\r\n        showClose: false,\r\n        clickToClose: true,\r\n        theme: \"bootstrap\"\r\n    });\r\n}]);","/**\r\n * Configuracion base para datapicker\r\n */\r\napp.controller(\"datapickerController\",[\"$scope\", function ($scope) {\r\n    $scope.open = function ($event) {\r\n        $event.preventDefault();\r\n        $event.stopPropagation();\r\n        $scope.datepickerOpened = true;\r\n    };\r\n\r\n    $scope.dateOptions = {\r\n        formatYear: 'yy',\r\n        startingDay: 1\r\n    };\r\n}]);","/**\r\n * Emite el evento prompt:enter luego de ingresar el dato solicitado en el prompter\r\n */\r\napp.controller(\"promptController\",[\"$scope\",\"$http\",\"$rootScope\", function($scope,$http,$rootScope  ){\r\n    var modal;\r\n\r\n    var onShow = $rootScope.$on('modal:show',function(event,value)\r\n    {\r\n        modal = value;\r\n        // Destruyo el evento listener modal:show\r\n        onShow();\r\n    });\r\n\r\n    var onHide = $rootScope.$on('modal:hide',function(event,value)\r\n    {\r\n        // Destruyo el evento listener modal:hide\r\n        onHide();\r\n    });\r\n\r\n    $scope.promptEnter = function(value)\r\n    {\r\n        if(value)\r\n        {\r\n            modal.prompt_value = value;\r\n            $scope.$emit(\"prompt:enter\",modal);\r\n        }\r\n    };\r\n}]);\r\n","app.controller(\"scannerController\",[\"$scope\",\"$rootScope\", function($scope, $rootScope)\r\n{\r\n    console.log(\"ScannerController Loaded\");\r\n    $rootScope.scannerListener = true;\r\n    $scope.scannerValue = '';\r\n\r\n    $scope.scannerReset = false;\r\n\r\n    $scope.scannerEvent = function(e)\r\n    {\r\n        if($rootScope.scannerListener) {\r\n            var code = (e.keyCode ? e.keyCode : e.which);\r\n            switch(code) {\r\n                case 13:\r\n                    $scope.$emit(\"scannerEvent:enter\",{\r\n                        value: $scope.scannerValue\r\n                    });\r\n\r\n                    if($scope.scannerReset) {\r\n                        $scope.scannerValue = \"\";\r\n                    }\r\n                    break;\r\n                default:\r\n                    // Continua agregando caracteres a scannerValue\r\n                    if(code!=16) {\r\n                        var stringChar = String.fromCharCode(code);\r\n                        $scope.scannerValue += stringChar;\r\n                    }\r\n                    break;\r\n            }\r\n            $scope.scannerReset = true;\r\n        }\r\n    };\r\n}]);\r\n","/*\r\n    Depende de la libreria SparkLine\r\n        'adminlte/plugins/sparkline/jquery.sparkline.min.js'\r\n */\r\napp.directive('dynamicbar', function() {\r\n    return {\r\n        scope: {\r\n            data: '='\r\n        },\r\n        link: function(scope, element) {\r\n            element.sparkline(scope.data, {\r\n                type: 'line',\r\n                height: '30',\r\n                width: '120',\r\n                barWidth: 8,\r\n                barSpacing: 3,\r\n                barColor: '#65edae',\r\n                negBarColor: '#ff5656'\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n\r\napp.directive('dynamicknob', function() {\r\n    return {\r\n        link: function(scope, element) {\r\n            element.knob();\r\n        }\r\n    }\r\n});","/**\r\n * Calcula el tiempo transcurrido entre un horario y el horario actual\r\n */\r\napp.directive('hourAgo', function () {\r\n    return function (scope, element, attrs)\r\n    {\r\n        var format = 'HH:mm:ss';\r\n        var inicio  = moment(attrs.hourAgo,format);\r\n\r\n        var seconds = attrs.refresh;\r\n        if(seconds==undefined) { seconds = 60;}\r\n\r\n        element.html('Calculando...');\r\n\r\n        var update = function() {\r\n            var time = new Date().toTimeString();\r\n            var fin = moment(time,format);\r\n            var ago = moment.duration(fin - inicio);\r\n            var output;\r\n\r\n            element.html(ago.hours()+'h, '+ago.minutes()+'m');\r\n        }\r\n\r\n        update();\r\n\r\n        setInterval(update, seconds * 1000);\r\n    };\r\n});\r\n","/*\r\n <modal-btn load=\"archivo/contenido.html\" header=\"Declarar OP\" type=\"primary\" class=\"btn-sm\">Declarar</modal-btn>\r\n */\r\napp.directive('modalBtn', function($rootScope, Modal) {\r\n    return {\r\n        restrict: 'E',\r\n        replace: true,\r\n        transclude: true,\r\n        template: '<button ng-transclude></button>',\r\n        link: function($scope, element, attrs)\r\n        {\r\n            var title = '';\r\n            var type = BootstrapDialog.TYPE_PRIMARY;\r\n\r\n            if(attrs.header)\r\n            {\r\n                title = attrs.header;\r\n            } else\r\n            {\r\n                if(attrs.tooltip)\r\n                {\r\n                    title = attrs.tooltip;\r\n                } else\r\n                {\r\n                    title = element.text();\r\n                }\r\n            }\r\n\r\n            element.bind('click',function()\r\n            {\r\n                $scope.openModal(attrs.load,title,type,attrs.controller);\r\n            });\r\n        }\r\n    }\r\n});\r\n","app.directive('ngAdmin', function () {\r\n    return function (scope, element, attrs) {\r\n        scope.$watch(attrs.ngAdmin, function(value) {\r\n            if(value) {\r\n                element.show();\r\n            } else {\r\n                element.hide();\r\n            }\r\n        }, true);\r\n    };\r\n});\r\n","app.directive('ngEnter', function () {\r\n    return function (scope, element, attrs) {\r\n        element.bind(\"keydown keypress\", function (event) {\r\n            if(event.which === 13) {\r\n                scope.$apply(function (){\r\n                    scope.$eval(attrs.ngEnter);\r\n                });\r\n\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    };\r\n});\r\n","app.directive('ngShortcut', function () {\r\n    return function (scope, element, attrs) {\r\n        var att = attrs.ngShortcut;\r\n        var totalshort = att.split(',');\r\n        if(totalshort.length > 0) {\r\n            angular.forEach(totalshort, function(value) {\r\n                var sp = value.split('=>');\r\n                var shortkey = sp[0];\r\n                var shortfunc = sp[1];\r\n\r\n                shortcut.add(shortkey,function() {\r\n                    scope.$eval(shortfunc)\r\n                });\r\n            });\r\n        }\r\n    };\r\n});","app.factory('IaCore',[\r\n    \"$http\",\"$rootScope\",\"$q\",\"cfpLoadingBar\", \"Modal\",\r\n    function($http,$rootScope,$q,cfpLoadingBar, Modal) {\r\n    var interfaz = {};\r\n\r\n    interfaz.http = function (options) {\r\n            var isTimeout = false,\r\n                httpRequest,\r\n                httpRequestOptions;\r\n\r\n            var rt = {};\r\n            rt.canceled = false;\r\n            rt.result = $q.defer();\r\n            rt.timeout = $q.defer();\r\n            rt.promise = null;\r\n\r\n            rt.cancel = function()\r\n            {\r\n                isTimeout = true;\r\n                rt.timeout.resolve();\r\n                rt.result.reject();\r\n                rt.canceled = true;\r\n                cfpLoadingBar.complete();\r\n            };\r\n\r\n            if(!options.timeout) {\r\n                options.timeout = 30;\r\n            };\r\n\r\n            setTimeout(function () {\r\n                isTimeout = true;\r\n                rt.timeout.resolve();\r\n            }, (1000 * options.timeout));\r\n\r\n            httpRequestOptions = {\r\n//            headers:  { 'X-Requested-With': 'XMLHttpRequest' },\r\n                method: options.method,\r\n                url: options.url,\r\n                cache: false,\r\n                timeout: rt.timeout.promise,\r\n            };\r\n\r\n            if(options.data) {\r\n                httpRequestOptions.data = options.data\r\n            };\r\n\r\n            httpRequest = $http(httpRequestOptions);\r\n\r\n            httpRequest.success(function(data, status, headers, config) {\r\n                rt.result.resolve(data);\r\n            });\r\n\r\n            httpRequest.error(function(data, status, headers, config) {\r\n                if (isTimeout) {\r\n                    if(rt.canceled)\r\n                    {\r\n/*                        rt.result.reject({\r\n                            message: 'Canceled: ' + options.url\r\n                        });*/\r\n                    } else {\r\n                        rt.result.reject({\r\n                            error: 'HTTP Timeout (' + options.timeout + ' seg)'\r\n                        });\r\n                    }\r\n                } else {\r\n                    if(status===0) {\r\n                        rt.result.reject({\r\n                            error: \"No se detecto conexion de red\"\r\n                        });\r\n                    } else {\r\n                        rt.result.reject({\r\n                            error: \"ERROR: \"+status\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n\r\n            return rt;\r\n        };\r\n    interfaz.modal =  function(options) {\r\n        var btype = BootstrapDialog.TYPE_PRIMARY;\r\n        switch (options.type)\r\n        {\r\n            case 'danger':  btype = BootstrapDialog.TYPE_DANGER;  break;\r\n            case 'default': btype = BootstrapDialog.TYPE_DEFAULT; break;\r\n            case 'success': btype = BootstrapDialog.TYPE_SUCCESS; break;\r\n            case 'warning': btype = BootstrapDialog.TYPE_WARNING; break;\r\n            case 'info':    btype = BootstrapDialog.TYPE_INFO;    break;\r\n            case 'primary': btype = BootstrapDialog.TYPE_PRIMARY; break;\r\n        }\r\n\r\n        if(!$rootScope.modalOpened) {\r\n            Modal.create(options.scope, options.title, options.route, btype, options.controller,options.ignoreloadingbar);\r\n        }\r\n    };\r\n    interfaz.modalError =  function(scope,err_msg) {\r\n        if(!$rootScope.modalOpened) {\r\n            Modal.error(scope,err_msg);\r\n        };\r\n    };\r\n    interfaz.storage = function(options){\r\n            if(options.value)\r\n            {\r\n                var save_value = options.value;\r\n                if (options.json) {\r\n                    save_value = JSON.stringify(options.value);\r\n                }\r\n                window.localStorage.setItem(options.name, save_value);\r\n            } else\r\n            {\r\n                var get_value = window.localStorage.getItem(options.name);\r\n                if(options.json) {\r\n                    return JSON.parse(get_value);\r\n                } else {\r\n                    return get_value;\r\n                }\r\n            }\r\n        };\r\n\r\n    return interfaz;\r\n}]);\r\n","app.factory('Modal',[\r\n    \"$http\",\"$compile\",\"$rootScope\",\"$timeout\",\r\n    function($http,$compile,$rootScope, $timeout) {\r\n    var modalScope;\r\n    var parentScope;\r\n    var interfaz = {};\r\n\r\n    interfaz.build = function(title, template, type) {\r\n            if(type == undefined) {\r\n                type = BootstrapDialog.TYPE_PRIMARY;\r\n            }\r\n            BootstrapDialog.show({\r\n                type:type,\r\n                title: title,\r\n                message: template,\r\n                onshown: function(dialogItself)\r\n                {\r\n                    $rootScope.modalOpened = true;\r\n\r\n                    $('input.focus').focus();\r\n                    modalScope.$emit(\"modal:show\",{\r\n                        modalscope: modalScope,\r\n                        parentscope: parentScope,\r\n                        dialog: dialogItself\r\n                    });\r\n                },\r\n                onhide: function(dialogItself)\r\n                {\r\n                    $rootScope.modalOpened = false;\r\n\r\n                    modalScope.$emit(\"modal:hide\",{\r\n                        modalscope: modalScope,\r\n                        parentscope: parentScope,\r\n                        dialog: dialogItself\r\n                    });\r\n                    modalScope.$destroy();\r\n                }\r\n            });\r\n        };\r\n    interfaz.create = function(scope,title,uri,type,controller,ignoreloadingbar) {\r\n            if(ignoreloadingbar==undefined)\r\n            {\r\n                ignoreloadingbar = true;\r\n            }\r\n            parentScope = scope;\r\n            modalScope = scope.$new();\r\n\r\n            return $http.get(uri,{\r\n                ignoreLoadingBar: ignoreloadingbar\r\n            }).then(function(response) {\r\n                var toCompile = response.data;\r\n                if(controller) {\r\n                    toCompile = '<div ng-controller=\"'+controller+'\">'+response.data+'</div>';\r\n                }\r\n                interfaz.build(\r\n                    title,\r\n                    $compile(toCompile)(modalScope),\r\n                    type\r\n                );\r\n                return modalScope;\r\n            }, function errorCallback(response) {\r\n//                var toCompile = '<div class=\"alert alert-danger\">Ocurrio un error ('+response.status+') durante la operacion, intente nuevamente en unos minutos, si el problema persiste consulte con el supervisor de programacion de automatica<div>';\r\n                var toCompile = 'Ocurrio un error ('+response.status+') durante la operacion, intente nuevamente en unos minutos, si el problema persiste consulte con el supervisor de programacion de automatica';\r\n                if(controller) {\r\n                    toCompile = '<div ng-controller=\"'+controller+'\">'+toCompile+'</div>';\r\n                }\r\n                interfaz.error(scope,toCompile);\r\n/*                interfaz.build(\r\n                    title,\r\n                    $compile(toCompile)(modalScope),\r\n                    type\r\n                );*/\r\n            });\r\n        };\r\n    interfaz.error = function(scope,err_msg) {\r\n            parentScope = scope;\r\n            modalScope = scope.$new();\r\n\r\n            var toCompile = '<div class=\"alert alert-danger\">'+err_msg+'<div>';\r\n\r\n            interfaz.build(\r\n                'ERROR',\r\n                $compile(toCompile)(modalScope),\r\n                BootstrapDialog.TYPE_DANGER\r\n            );\r\n            return modalScope;\r\n        };\r\n\r\n    return interfaz;\r\n}]);\r\n","app.filter('porcentaje', ['$window', function ($window) {\r\n    return function (input, decimals, suffix) {\r\n        decimals = angular.isNumber(decimals)? decimals :  3;\r\n        if(suffix!='') {\r\n            suffix = suffix || '%';\r\n        }\r\n        if ($window.isNaN(input)) {\r\n            return '';\r\n        }\r\n        return Math.round(input * Math.pow(10, decimals + 2))/Math.pow(10, decimals) + suffix\r\n    };\r\n}]);\r\n","app.filter('range', function() {\r\n    return function(input, total) {\r\n        total = parseInt(total);\r\n        for (var i=1; i<=total; i++)\r\n            input.push(i);\r\n        return input;\r\n    };\r\n});\r\n"]}